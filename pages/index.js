import Head from "next/head";
import { useState } from "react";
import { transferNFT, transferTokenERC20 } from "../src/transfer";

export default function Home() {
  const [privateKey, setPrivateKey] = useState("");
  const [address, setAddress] = useState("");
  const [isNFTLoading, setNFTLoading] = useState(false);
  const [isTokenLoading, setTokenLoading] = useState(false);

  const [NFTSuccess, setNFTSuccess] = useState(null);
  const [NFTError, setNFTError] = useState(null);
  const [TokenSuccess, setTokenSuccess] = useState(null);
  const [TokenError, setTokenError] = useState(null);

  const handleNftClick = async () => {
    setNFTLoading(true);
    setNFTSuccess(null);
    setNFTError(null);
    try {
      const amount = await transferNFT(privateKey, address);
      setNFTSuccess(amount);
    } catch (error) {
      setNFTError(error);
    } finally {
      setNFTLoading(false);
    }
  };

  const handleTokenClick = async () => {
    setTokenLoading(true);
    setTokenError(null);
    setTokenSuccess(null);

    try {
      const amount = await transferTokenERC20(privateKey, address);
      setTokenSuccess(amount);
    } catch (error) {
      setTokenError(error);
    } finally {
      setTokenLoading(false);
    }
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <body>
        <div className="container-sm" style={{ marginTop: 100, maxWidth: 800 }}>
          <h3 className="mb-3">
            Transfer all token & NFT to another wallet address
          </h3>
          <div className="mb-4">
            <label htmlFor="exampleFormControlInput1" className="form-label">
              Private key
            </label>
            <input
              value={privateKey}
              onChange={(event) => setPrivateKey(event.target.value)}
              type="text"
              className="form-control"
              id="exampleFormControlInput1"
              placeholder="8da4ef21b864d2cc526dbdb2a120bd2874c36c9d0a1fb7f8c63d7f7a8b41de8f"
            />
          </div>
          <div className="mb-4">
            <label htmlFor="exampleFormControlInput1" className="form-label">
              Destination address
            </label>
            <input
              value={address}
              onChange={(event) => setAddress(event.target.value)}
              type="text"
              className="form-control"
              id="exampleFormControlInput1"
              placeholder="0xbe932a99EAaE5bd33139e59DBcB788A22570A7FC"
            />
          </div>
          <button
            type="button"
            className="btn btn-primary mb-3 d-block"
            onClick={() => handleNftClick()}
          >
            {!isNFTLoading ? (
              "Transfer all Nft"
            ) : (
              <div className="spinner-border spinner-border-sm" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
            )}
          </button>
          {NFTSuccess !== null ? (
            <div class="alert alert-success" role="alert">
              Success transfer {NFTSuccess} Nfts
            </div>
          ) : null}
          {NFTError !== null ? (
            <div class="alert alert-danger" role="alert">
              {NFTError?.message}
            </div>
          ) : null}
          <button
            type="button"
            className="btn btn-primary mb-3 d-block"
            onClick={() => handleTokenClick()}
          >
            {!isTokenLoading ? (
              "Transfer all Tokens"
            ) : (
              <div className="spinner-border spinner-border-sm" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
            )}
          </button>

          {TokenSuccess !== null ? (
            <div class="alert alert-success" role="alert">
              Success transfer {TokenSuccess} tokens
            </div>
          ) : null}
          {TokenError !== null ? (
            <div class="alert alert-danger" role="alert">
              {TokenError?.message}
            </div>
          ) : null}
        </div>
      </body>
    </>
  );
}
